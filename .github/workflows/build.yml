name: "Build and test Lua project"
on: [push]
jobs:

  build:
    strategy:
       fail-fast: true
       matrix:
          lua_version: [5.4]
          exasol_version: [7.1.6]
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-lua-${{ matrix.lua_version }}-exasol-${{ matrix.exasol_version }}
      cancel-in-progress: true
    name: "Build with Lua ${{ matrix.lua_version }} and Exasol ${{ matrix.exasol_version }}"
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Checkout integration test docker environment
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          repository: 'exasol/integration-test-docker-environment'
          path: 'integration-test-docker-environment'

      - name: Install Lua ${{ matrix.lua_version }}
        uses: leafo/gh-actions-lua@v8.0.0
        with:
          luaVersion: ${{ matrix.lua_version }}

      - name: Install LuaRocks
        uses: leafo/gh-actions-luarocks@v4
        with:
          luarocksVersion: "3.8.0"

      - name: Print versions
        run: |
          lua -v
          luarocks --version
          luarocks path

      - name: Install Lua dependencies
        run: |
          luarocks install --local --deps-only *.rockspec

      - name: "Build"
        run: luarocks make --local

      - name: Run smoketests
        run: |
          eval $(luarocks path)
          LOG_LEVEL=TRACE RUN_ONLY=smoketest.lua ./tools/runtests.sh

      - name: Spawn Exasol environment
        run: |
          ./start-test-env spawn-test-environment --environment-name test \
            --docker-db-image-version ${{ matrix.exasol_version }} \
            --database-port-forward 8563 \
            --deactivate-database-setup
        working-directory: integration-test-docker-environment

      - name: Run integration tests
        run: |
          source $GITHUB_WORKSPACE/integration-test-docker-environment/.build_output/cache/environments/test/environment_info.sh
          eval $(luarocks path)
          LOG_LEVEL=DEBUG \
            EXASOL_HOST=$ENVIRONMENT_DATABASE_HOST \
            EXASOL_PORT=$ENVIRONMENT_DATABASE_DB_PORT \
            EXASOL_USER=sys EXASOL_PASSWORD=exasol \
            tools/runtests.sh

      - name: Archive test results
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: test-reports
          path: target/luaunit-reports/*

      - name: Publish test teports
        uses: scacap/action-surefire-report@v1
        if: ${{ always() }}
        with:
          report_paths: 'target/luaunit-reports/*.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Archive code coverage results
        uses: actions/upload-artifact@v2
        with:
          name: luacov-report
          path: target/luacov-reports/*

      - name: Validate tools
        if: ${{ always() }}
        run: shellcheck --check-sourced --severity=style tools/*.sh

      - name: Run static code analysis
        if: ${{ always() }}
        run: |
          eval $(luarocks path)
          tools/runluacheck.sh
      
      - name: Run repeated tests
        run: |
          source $GITHUB_WORKSPACE/integration-test-docker-environment/.build_output/cache/environments/test/environment_info.sh
          eval $(luarocks path)
          for run in {1..20}; do
            echo "Starting test run $run"
            LOG_LEVEL=DEBUG \
              EXASOL_HOST=$ENVIRONMENT_DATABASE_HOST \
              EXASOL_PORT=$ENVIRONMENT_DATABASE_DB_PORT \
              EXASOL_USER=sys EXASOL_PASSWORD=exasol \
              tools/runtests.sh
          done

      - name: Archive repeated tests results
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: repeated-test-reports
          path: target/luaunit-reports/*

## Deactivated until requirements and coverage are added

#      - name: "Set up JDK"
#        uses: actions/setup-java@v2
#        with:
#          java-version: '11'
#          distribution: 'temurin'
#      - name: Trace requirements
#        run: ./tools/trace-requirements.sh

  ## This is a separate job because it requires running apt-get which takes > 40s.
  ## When to other job also uses apt-get this can be moved back.
  plantuml:
    strategy:
       fail-fast: true
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    name: "Build Plantuml diagrams"
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Install Plantuml
        run: |
          sudo apt-get update -y
          sudo apt-get install -y plantuml

      - name: Build diagrams
        run: ./tools/build-diagrams.sh

      - name: Check if diagrams are up-to-date
        run: |
          if [[ `git status --porcelain` ]]; then
            echo "ERROR: Generated diagrams are not up-to-date:"
            git status --porcelain
            git diff
            echo "Please run './tools/build-diagrams.sh' and commit the changes."
            exit 1
          else
            echo "Diagrams are up-to-date"
          fi
